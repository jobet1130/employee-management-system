# Employees API Documentation

openapi: 3.0.0
paths:
  /api/employees:
    get:
      tags: [Employees]
      summary: Get all employees
      description: Returns a paginated list of employees with optional filtering
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, SUSPENDED]
        - name: departmentId
          in: query
          schema:
            type: string
        - name: positionId
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of employees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Employees]
      summary: Create a new employee
      description: Creates a new employee with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Employee with this email already exists

  /api/employees/{id}:
    parameters:
      - $ref: '#/components/parameters/employeeId'
    
    get:
      tags: [Employees]
      summary: Get employee by ID
      description: Returns a single employee by their ID
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags: [Employees]
      summary: Update an employee
      description: Updates an existing employee with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Employees]
      summary: Delete an employee
      description: Soft deletes an employee by setting the deletedAt timestamp
      responses:
        '200':
          description: Employee marked as deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Employee deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
